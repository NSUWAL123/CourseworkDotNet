@page "/inventory"

<nav class="navbar navbar-light px-5 rounded-3 justify-content-between">
    <h1 class="navbar-brand mb-0"><b>Inventory</b></h1>

    @*Displays following text if inventory is not opened*@
    @if (!Utils.CheckInventoryOpeningTime() && _role == "User") {
        <p class="text-danger"><b>Items can only be reqeusted between 9AM-4PM from Mon-Fri!</b></p>
    }

    <div class="d-flex">
        <input type="search" class="form-control search border-0" placeholder="Search by Item Name" @oninput="SearchItemName" />
        <a class='btn text-@(_sortBy == "ItemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
           @onclick='()=>SortByHandler("ItemName")'>
            <span class='oi oi-sort-@(_sortBy == "ItemName" ? _sortDirection : "ascending")' />
        </a>
    </div>
    <button class='btn btn-success @(_role == "User" ? "display-none" : "" )' type="button" @onclick="OpenAddItemDialog">
        <span class="oi oi-plus mx-1" /><b class="mx-1">Add Item</b>
    </button>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Item
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Last Taken Out On
                    <a class='btn text-@(_sortBy == "lastTaken" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("lastTaken")'>
                        <span class='oi oi-sort-@(_sortBy == "lastTaken" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<InventoryItem> inventoryList = _inventory;
            if (_sortBy == "ItemName")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.ItemName) : inventoryList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "createdAt")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.CreatedAt) : inventoryList.OrderByDescending(t =>
                t.CreatedAt);
            }
            else if (_sortBy == "lastTaken")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.LastTakenOutOn) : inventoryList.OrderByDescending(t =>
                t.LastTakenOutOn);
            }

            foreach (var InventoryItem in inventoryList)
            {
                if (InventoryItem.Quantity > 0) //only displaying items to the inventory section if quantity of the items is more than 0
                {
                    <tr>
                        <td><b>@InventoryItem.ItemName</b></td>
                        <td>@InventoryItem.Quantity</td>
                        <td>
                            <p class="small mb-0">
                                @InventoryItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                            </p>
                        </td>

                        @if (InventoryItem.LastTakenOutOn == default(DateTime)) //displaying empty column if the item has not been taken out once
                        {
                            <td>
                            </td>
                        }
                        else
                        {
                            <td>
                                @InventoryItem.LastTakenOutOn.ToString("MMM dd, yyyy h:mm tt") @*converting date to string format for detailed view of date*@
                            </td>
                        }

                        <td>
                            <button class="btn btn-danger mx-2 @(_role == "User" ? "display-none" : "" )" type="button" @onclick="()=>OpenDeleteItemDialog(InventoryItem)"> @*showing the button only for admin*@
                                <span class="oi oi-delete mx-1" /><b>Delete</b>
                            </button>

                            <button class="btn btn-success @(_role == "Admin" ? "display-none" : "" ) @(Utils.CheckInventoryOpeningTime() ? "": "disabled")" type="button" @onclick="()=>OpenTakeItemDialog(InventoryItem)">
                                <span class="oi oi-success" /><b>Request Retrieval</b> @*showing the button only for staff*@
                            </button>
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>

@if (_showeditInventoryDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OneditInventoryDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating my-1">
            <input id="itemName" type="text" class="form-control" @bind="_inventoryModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating my-1">
            <input id="Quantity" type="number" class="form-control" @bind="_inventoryModel.Quantity" placeholder="Task Name" />
            <label for="Quantity">Quantity</label>
        </div>

        @if (_inventoryModel.ItemName == "")
        {
            <AlertMessage Type="danger" Message="Please enter an item name." />
        }

        @if (!string.IsNullOrEmpty(_editInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editInventoryErrorMessage" />
        }
    </ModalDialog>
}

@if (_showDeleteInventoryDialog)
{
    <ModalDialog Title="Delete Item" OnClose="@OnDeleteInventoryDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteInventory.ItemName</strong> item?</p>
        @if (!string.IsNullOrEmpty(_deleteInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteInventoryErrorMessage" />
        }
    </ModalDialog>
}

@if (_showTakeInventoryDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnTakeInventoryDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <p id="itemName"><b>Item Name:</b> @_inventoryModel.ItemName</p>
        </div>
        <div class="form-floating">
            <input id="Quantity" type="number" class="form-control" @bind="_takeQuantity" placeholder="Quantity" />
            <label for="Quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_takeInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_takeInventoryErrorMessage" />
        }


    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showeditInventoryDialog { get; set; }
    private bool _showDeleteInventoryDialog { get; set; }
    private bool _showTakeInventoryDialog { get; set; }
    private List<InventoryItem> _inventory { get; set; }
    private List<ItemRequest> _itemRequest { get; set; }
    private InventoryItem _deleteInventory { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editInventoryErrorMessage { get; set; }
    private string _deleteInventoryErrorMessage { get; set; }
    private InventoryItem _inventoryModel { get; set; }
    private string _sortBy = "";
    private string _sortDirection = "ascending";
    private User _user;
    private string _role;
    private int _takeQuantity;
    private string _takeInventoryErrorMessage { get; set; }
    private string status { get; set; }

    protected override void OnInitialized()
    {
        _inventory = InventoryService.GetAll();
        _user = UsersService.GetById(_globalState.CurrentUser.Id);
        _role = _user.Role.ToString();
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _inventoryModel = new InventoryItem();
        _inventoryModel.Id = Guid.Empty;
        _showeditInventoryDialog = true;
    }

    private void SearchItemName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length >= 1) //search starts after character is 1 or more
        {
            _inventory = InventoryService.GetAll().Where(t =>
            t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _inventory = InventoryService.GetAll();
        }
    }

    private void OpenEditInventoryDialog(InventoryItem editInventory)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";
        _inventoryModel = editInventory;
        _showeditInventoryDialog = true;
    }

    private void OneditInventoryDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showeditInventoryDialog = false;
        }
        else
        {
            try
            {
                _editInventoryErrorMessage = "";
                if (_inventoryModel.Id == Guid.Empty)
                {
                    _inventory = InventoryService.Create(_inventoryModel.ItemName, _inventoryModel.Quantity);
                }
                else
                {
                    _inventory = InventoryService.Update(_inventoryModel.Id, _inventoryModel.ItemName, _inventoryModel.Quantity);
                }
                _showeditInventoryDialog = false;
            }
            catch (Exception e)
            {
                _editInventoryErrorMessage = e.Message;
            }
        }
    }

    private void OpenDeleteItemDialog(InventoryItem InventoryItem)
    {
        _deleteInventory = InventoryItem;
        _showDeleteInventoryDialog = true;
    }

    private void OnDeleteInventoryDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteInventoryDialog = false;
            _deleteInventory = null;
        }
        else
        {
            try
            {
                _deleteInventoryErrorMessage = "";
                _inventory = InventoryService.Delete(_deleteInventory.Id);
                _showDeleteInventoryDialog = false;
                _deleteInventory = null;
            }
            catch (Exception e)
            {
                _deleteInventoryErrorMessage = e.Message;
            }
        }
    }

    private void OpenTakeItemDialog(InventoryItem takeInventory)
    {
        _dialogTitle = "Take Item";
        _dialogOkLabel = "Take";
        _inventoryModel = takeInventory;
        _showTakeInventoryDialog = true;
        _takeQuantity = 0;
        _takeInventoryErrorMessage = "";
    }

    private void OnTakeInventoryDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showTakeInventoryDialog = false;
        }
        else
        {
            try
            {
                var userId = _globalState.CurrentUser.Id;
                var user = UsersService.GetById(userId);
                var status = false;

                if (InventoryService.IsValid(_inventoryModel.Quantity, _takeQuantity, _inventoryModel.ItemName))
                {
                    if (Utils.CheckInventoryOpeningTime())
                    {
                        _itemRequest = InventoryService.CreateRequestItem(user.Username, _inventoryModel.ItemName, _takeQuantity, status);
                    }
                    _showTakeInventoryDialog = false;
                    
                }
            }
            catch (Exception e)
            {
                _takeInventoryErrorMessage = e.Message;
            }
        }
    }
}








