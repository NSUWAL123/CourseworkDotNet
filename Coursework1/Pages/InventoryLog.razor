@page "/inventory-log"

<nav class="navbar navbar-light px-5 rounded-3 justify-content-between">
    <h1 class="navbar-brand mb-0 h1"><b>Inventory Log @(month.ToString() == "0" ? "of all Months" : "of " + getFullMonth(month) + " " + @year)</b></h1> @*conditional rendering of topic*@
    <div>
        <input type="month" @oninput="ShowLog" class="p-1 rounded-3" />
    </div>
</nav>


<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Item Name
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                </div>
            </th>

            <th>
                <div class="d-flex">
                    Taken By
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Approved By
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Date Taken
                    <a class='btn text-@(_sortBy == "ApprovedAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("ApprovedAt")'>
                        <span class='oi oi-sort-@(_sortBy == "ApprovedAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<ItemRequest> inventoryList = _itemRequest;

            if (_sortBy == "ApprovedAt")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.ApprovedAt) : inventoryList.OrderByDescending(t =>
                t.ApprovedAt);
            }

            if (month == 0 && year == 0) //show all the logs if month has not been selected
            {
                foreach (var InventoryItem in inventoryList)
                {
                    if (InventoryItem.ApprovalStatus) //only displays logs if the item is approved by the admin
                    {
                        <tr>
                            <td>@InventoryItem.ItemName</td>
                            <td>@InventoryItem.Quantity</td>
                            <td>@InventoryItem.UserName</td>
                            <td>@InventoryItem.Admin</td>
                            <td>@InventoryItem.ApprovedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                        </tr>
                    }
                }
            }
            else //executes if any month and year is chosen
            {
                foreach (var InventoryItem in inventoryList)
                {
                    if (month.ToString() == @InventoryItem.ApprovedAt.Month.ToString() && year.ToString() == @InventoryItem.ApprovedAt.Year.ToString()) //only executes the log of the selected month and year
                    {
                        if (InventoryItem.ApprovalStatus) //only displays logs if the item is approved by the admin
                        {
                            <tr>
                                <td>@InventoryItem.ItemName</td>
                                <td>@InventoryItem.Quantity</td>
                                <td>@InventoryItem.UserName</td>
                                <td>@InventoryItem.Admin</td>
                                <td>@InventoryItem.ApprovedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                            </tr>
                        }
                    }
                }
            }
        }
    </tbody>
</table>

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<ItemRequest> _itemRequest { get; set; }
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private User _user;
    private string _role;
    private int month;
    private int year;

    protected override void OnInitialized()
    {
        _itemRequest = InventoryService.GetAllRequestedItem();
        _user = UsersService.GetById(_globalState.CurrentUser.Id);
        _role = _user.Role.ToString();
        month = 0;
        year = 0;
    }

    private void ShowLog(ChangeEventArgs e)
    {
        var searchTerm = Convert.ToDateTime(e.Value);
        month = searchTerm.Month;
        year = searchTerm.Year;
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    public string getFullMonth(int month)
    {
        DateTime date = new DateTime(2000, month, 1);
        return date.ToString("MMMM");
    }

}







