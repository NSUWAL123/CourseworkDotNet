@page "/inventory"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Inventory</h1>
    <div class="d-flex">
        <input type="search" class="form-control search" placeholder="Search" @oninput="SearchItemName" />
        <a class='btn text-@(_sortBy == "ItemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
           @onclick='()=>SortByHandler("ItemName")'>
            <span class='oi oi-sort-@(_sortBy == "ItemName" ? _sortDirection : "ascending")' />
        </a>
    </div>
    <button class='btn btn-primary @(_role == "User" ? "display-none" : "" )' type="button" @onclick="OpenAddTodoDialog">
        <span class="oi oi-plus" /> Add Item
    </button>
</nav>


<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Item Name
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                </div>
            </th>

            
            
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Last Taken Out On
                    <a class='btn text-@(_sortBy == "lastTaken" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("lastTaken")'>
                        <span class='oi oi-sort-@(_sortBy == "lastTaken" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<InventoryItem> inventoryList = _inventory;
           if (_sortBy == "ItemName")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.ItemName) : inventoryList.OrderByDescending(t =>
                t.ItemName);
            }          
            else if (_sortBy == "createdAt")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.CreatedAt) : inventoryList.OrderByDescending(t =>
                t.CreatedAt);
            } else if (_sortBy == "lastTaken")
            {
                inventoryList = _sortDirection == "ascending" ? inventoryList.OrderBy(t => t.LastTakenOutOn) : inventoryList.OrderByDescending(t =>
                t.LastTakenOutOn);
            }
         
            foreach (var InventoryItem in inventoryList)
            {
                        <tr>                
                            <td>@InventoryItem.ItemName</td>       
                            <td>@InventoryItem.Quantity</td>
                        <td>

                            <p class="small mb-0">
                                @InventoryItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                            </p>
                        </td>

                            
                        
                            @if (InventoryItem.LastTakenOutOn == default(DateTime)) {
                                <td>
                                </td>
                    } else {
                            <td>
                                @InventoryItem.LastTakenOutOn.ToString("MMM dd, yyyy h:mm tt")
                            </td>
                    }
                            
                            
                            <td>
                                <button class="btn btn-outline-secondary @(_role == "User" ? "display-none" : "" )" type="button"
                                @onclick="()=>OpenEditInventoryDialog(InventoryItem)">
                                <span class="oi oi-pencil" /> Edit
                            </button>
                                <button class="btn btn-outline-danger @(_role == "User" ? "display-none" : "" )" type="button" @onclick="()=>OpenDeleteTodoDialog(InventoryItem)">
                                <span class="oi oi-delete" /> Delete
                            </button>


                        <button class="btn btn-success @(_role == "Admin" ? "display-none" : "" ) @(Utils.CheckOpeningTime() ? "": "disabled")" type="button" @onclick="()=>OpenTakeItemDialog(InventoryItem)">
                                <span class="oi oi-success" /> Take Item
                            </button>
                        </td>

                    </tr>
            }
        }
    </tbody>
</table>

@if (_showeditInventoryDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OneditInventoryDialogClose" OkLabel="@_dialogOkLabel">
    <div class="form-floating">
        <input id="itemName" type="text" class="form-control" @bind="_inventoryModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
    </div>
        <div class="form-floating">
            <input id="Quantity" type="text" class="form-control" @bind="_inventoryModel.Quantity" placeholder="Task Name" />
            <label for="Quantity">Quantity</label>
        </div>

    @if (!string.IsNullOrEmpty(_editInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editInventoryErrorMessage" />
        }
        </ModalDialog>
}

@if (_showDeleteInventoryDialog)
{
    <ModalDialog Title="Delete Item" OnClose="@OnDeleteInventoryDialogClose" OkLabel="Confirm">
    <p>Are you sure you want to delete <strong>@_deleteInventory.ItemName</strong> item?</p>
    @if (!string.IsNullOrEmpty(_deleteInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteInventoryErrorMessage" />
        }
        </ModalDialog>
}


@if (_showTakeInventoryDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnTakeInventoryDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            @*<input id="itemName" type="text" class="form-control" @bind="_inventoryModel.ItemName" placeholder="Item Name" />*@
            <p id="itemName"><b>Item Name:</b> @_inventoryModel.ItemName</p>
            @*<label for="itemName">Item Name</label>*@
        </div>
        <div class="form-floating">
            <input id="Quantity" type="text" class="form-control" @bind="_takeQuantity" placeholder="Quantity" />
            <label for="Quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_editInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editInventoryErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showeditInventoryDialog { get; set; }
    private bool _showDeleteInventoryDialog { get; set; }
    private bool _showTakeInventoryDialog { get; set; } //////
    private List<InventoryItem> _inventory { get; set; }
    private List<ItemRequest> _itemRequest { get; set; }
    private InventoryItem _deleteInventory { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editInventoryErrorMessage { get; set; }
    private string _deleteInventoryErrorMessage { get; set; }
    private InventoryItem _inventoryModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private User _user;
    private string _role;
    private int _takeQuantity;//////
    private string _takeInventoryErrorMessage { get; set; }
    private string status { get; set; }



    protected override void OnInitialized()
    {
        _inventory = InventoryService.GetAll();//_globalState.CurrentUser.Id
        _user = UsersService.GetById(_globalState.CurrentUser.Id);
        _role = _user.Role.ToString();

    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddTodoDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _inventoryModel = new InventoryItem();
        _inventoryModel.Id = Guid.Empty;
        _showeditInventoryDialog = true;
    }

    private void SearchItemName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length >= 1)
        {
            _inventory = InventoryService.GetAll().Where(t =>
            t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();//_globalState.CurrentUser.Id
        }
        else
        {
            _inventory = InventoryService.GetAll();//_globalState.CurrentUser.Id
        }
    }

    ///////////////////////////////////////////////////////////////////////
    private void OpenEditInventoryDialog(InventoryItem editInventory)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";
        _inventoryModel = editInventory;
        _showeditInventoryDialog = true;
    }

    private void OpenDeleteTodoDialog(InventoryItem InventoryItem)
    {
        _deleteInventory = InventoryItem;
        _showDeleteInventoryDialog = true;
    }


    //////////////////////////////////////////////////////////////////////////
    private void OneditInventoryDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showeditInventoryDialog = false;
        }
        else
        {
            try
            {
                _editInventoryErrorMessage = "";
                if (_inventoryModel.Id == Guid.Empty)
                {
                    _inventory = InventoryService.Create( _inventoryModel.ItemName, _inventoryModel.Quantity);//_globalState.CurrentUser.Id
                }
                else
                {
                    _inventory = InventoryService.Update( _inventoryModel.Id, _inventoryModel.ItemName, _inventoryModel.Quantity);//_globalState.CurrentUser.Id
                }
                _showeditInventoryDialog = false;
            }
            catch (Exception e)
            {
                _editInventoryErrorMessage = e.Message;
            }
        }
    }

    private void OnDeleteInventoryDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteInventoryDialog = false;
            _deleteInventory = null;
        }
        else
        {
            try
            {
                _deleteInventoryErrorMessage = "";
                _inventory = InventoryService.Delete( _deleteInventory.Id); //_globalState.CurrentUser.Id
                _showDeleteInventoryDialog = false;
                _deleteInventory = null;
            }
            catch (Exception e)
            {
                _deleteInventoryErrorMessage = e.Message;
            }
        }
    }



    private void OpenTakeItemDialog(InventoryItem takeInventory)
    {
        _dialogTitle = "Take Item";
        _dialogOkLabel = "Take";
        _inventoryModel = takeInventory;
        _showTakeInventoryDialog = true;
    }

    private void OnTakeInventoryDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showTakeInventoryDialog = false;
        }
        else
        {
            try
            {
                var userId = _globalState.CurrentUser.Id;
                var user = UsersService.GetById(userId);
                var status = false;

                if (Utils.CheckOpeningTime()) { 
                    _itemRequest = InventoryService.CreateRequestItem(user.Username, _inventoryModel.ItemName, _takeQuantity, status);
               
                }
                _showTakeInventoryDialog = false;
            }
            catch (Exception e)
            {
                _takeInventoryErrorMessage = e.Message;
            }
        }
    }   
}







